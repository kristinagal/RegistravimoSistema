// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistravimoSistema;

#nullable disable

namespace RegistravimoSistema.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241218211248_TestMigration")]
    partial class TestMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RegistravimoSistema.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ButoNumeris")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Gatve")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Miestas")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NamoNumeris")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71af4f5e-d83d-4244-899c-1e326f546d2c"),
                            ButoNumeris = "101",
                            Gatve = "Gedimino pr.",
                            Miestas = "Vilnius",
                            NamoNumeris = "1",
                            PersonId = new Guid("e66c7520-ba75-4dcc-b7b1-7df65d35fb85")
                        });
                });

            modelBuilder.Entity("RegistravimoSistema.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AsmensKodas")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasComment("Format: 1YYMMDDXXXX");

                    b.Property<string>("ElPastas")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Pavarde")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("ProfilioNuotrauka")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TelefonoNumeris")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Starts with '8' or '+370'");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Vardas")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AsmensKodas")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e66c7520-ba75-4dcc-b7b1-7df65d35fb85"),
                            AsmensKodas = "19901010001",
                            ElPastas = "admin@example.com",
                            Pavarde = "User",
                            ProfilioNuotrauka = new byte[0],
                            TelefonoNumeris = "+37060012345",
                            UserId = new Guid("8a8f4006-beb0-4110-9f3f-9be0b049a3d2"),
                            Vardas = "Admin"
                        });
                });

            modelBuilder.Entity("RegistravimoSistema.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a8f4006-beb0-4110-9f3f-9be0b049a3d2"),
                            PasswordHash = new byte[] { 151, 169, 155, 59, 113, 42, 157, 71, 210, 120, 113, 230, 111, 230, 120, 166, 113, 25, 182, 168, 205, 193, 24, 132, 136, 101, 212, 186, 221, 2, 254, 158, 252, 71, 206, 220, 215, 98, 232, 219, 222, 157, 213, 246, 166, 51, 108, 204, 71, 238, 19, 186, 117, 0, 134, 156, 31, 237, 33, 251, 9, 114, 42, 133 },
                            PasswordSalt = new byte[] { 224, 159, 121, 119, 126, 207, 228, 77, 11, 216, 198, 49, 72, 190, 94, 210 },
                            Role = "Admin",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("RegistravimoSistema.Entities.Address", b =>
                {
                    b.HasOne("RegistravimoSistema.Entities.Person", "Person")
                        .WithOne("Address")
                        .HasForeignKey("RegistravimoSistema.Entities.Address", "PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("RegistravimoSistema.Entities.Person", b =>
                {
                    b.HasOne("RegistravimoSistema.Entities.User", "User")
                        .WithMany("Persons")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RegistravimoSistema.Entities.Person", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("RegistravimoSistema.Entities.User", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
